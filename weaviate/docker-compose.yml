version: '3.8'

services:
  weaviate:
    image: semitechnologies/weaviate:1.22.4
    container_name: weaviate_tempsvc
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'  # We'll handle vectorization manually
      ENABLE_MODULES: 'text2vec-contextionary,generative-openai,qna-openai'
      CLUSTER_HOSTNAME: 'node1'
      
      # Memory and performance settings for Raspberry Pi 5
      GOGC: '100'  # Garbage collection frequency
      GOMEMLIMIT: '2GiB'  # Memory limit for Go runtime
      
      # Storage settings optimized for SD card
      DISK_USE_READONLY_PERCENTAGE: 80
      
      # Logging
      LOG_LEVEL: 'info'
      
    volumes:
      - weaviate_data:/var/lib/weaviate
      - ./weaviate_config.json:/weaviate.conf.json:ro
    
    # Resource limits for Raspberry Pi 5
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Weaviate monitoring with Prometheus
  weaviate-prometheus:
    image: prom/prometheus:latest
    container_name: weaviate_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'  # Keep 7 days of metrics
      - '--web.enable-lifecycle'
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'
    
    depends_on:
      weaviate:
        condition: service_healthy

  # Grafana dashboard for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: weaviate_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    # Resource limits  
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'
    
    depends_on:
      - weaviate-prometheus

volumes:
  weaviate_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/weaviate/data  # Ensure this directory exists and has proper permissions
  
  prometheus_data:
    driver: local
    
  grafana_data:
    driver: local

networks:
  default:
    name: weaviate_network 